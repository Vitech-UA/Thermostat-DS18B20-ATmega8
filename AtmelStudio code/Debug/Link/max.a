;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <delay.h>
;#include <1wire.h>
;#include <ds18b20.h>
;
;#define _soft_data  PORTC.1
;#define _soft_shift PORTC.0
;#define _soft_latch PORTC.2
;
;#define MAX7219_MODE_DECODE       0x09
;#define MAX7219_MODE_INTENSITY    0x0A
;#define MAX7219_MODE_SCAN_LIMIT   0x0B
;#define MAX7219_MODE_POWER        0x0C
;#define MAX7219_MODE_TEST         0x0F
;#define MAX7219_MODE_NOOP         0x00
;
;#define Button_plus PINB.1
;#define Button_minus PINB.2
;#define RELE PORTD.0
;
;int gisteresis = 1; //  гістерезис термостату.
;eeprom int dtemper = 25;
;int temper = 0;
;
;
;void write(char data, char adress)
; 0000 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001D        unsigned char i;
; 0000 001E        //опускаем CS
; 0000 001F        _soft_latch=0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	data -> Y+2
;	adress -> Y+1
;	i -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0020        #asm("nop") //latch
;PCODE: $00000013 VOL: 0
	nop
;PCODE: $00000014 VOL: 0
; 0000 0021 
; 0000 0022        //задвигаем адрес
; 0000 0023        for(i=0;i<8;i++)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0024        {
; 0000 0025        if(adress & 0x80)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0026        {
; 0000 0027        _soft_data = 1;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0028        }
; 0000 0029        else
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002A        {
; 0000 002B        _soft_data = 0;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002C        }
;PCODE: $00000027 VOL: 0
; 0000 002D          #asm("nop") //shift
;PCODE: $00000028 VOL: 0
	nop
;PCODE: $00000029 VOL: 0
; 0000 002E          _soft_shift=1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002F          #asm("nop")
;PCODE: $0000002C VOL: 0
	nop
;PCODE: $0000002D VOL: 0
; 0000 0030          _soft_shift=0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0031          adress <<= 1;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0032        }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0033 
; 0000 0034        //задвигаем данные
; 0000 0035        for(i=0;i<8;i++)
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0036        {
; 0000 0037        if(data & 0x80)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0038        {
; 0000 0039        _soft_data = 1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 003A        }
; 0000 003B        else
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 003C        {
; 0000 003D        _soft_data = 0;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 003E        }
;PCODE: $0000004A VOL: 0
; 0000 003F          #asm("nop") //shift
;PCODE: $0000004B VOL: 0
	nop
;PCODE: $0000004C VOL: 0
; 0000 0040          _soft_shift=1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0041          #asm("nop")
;PCODE: $0000004F VOL: 0
	nop
;PCODE: $00000050 VOL: 0
; 0000 0042          _soft_shift=0;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0043          data <<= 1;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0044       }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0045        _soft_latch=1;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0046 }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;
; void print_val(int a)
; 0000 004A  {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004B     char R_1 = 0;
; 0000 004C     char R_2 = 0;
; 0000 004D     char R_3 = 0;
; 0000 004E 
; 0000 004F     R_1 = a / 100;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;	a -> Y+4
;	R_1 -> R17
;	R_2 -> R16
;	R_3 -> R19
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0050     R_2 = (a - R_1 * 100) / 10;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0051     R_3 = (a - R_1 * 100) % 10;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0052 
; 0000 0053     write(R_1, 0x01);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0054     write(R_2, 0x02);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0055     write(R_3, 0x03);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0056 
; 0000 0057  }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;void main(void)
; 0000 0059 {
;PCODE: $0000008B VOL: 0
; 0000 005A 
; 0000 005B  DDRC = 0xFF;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 005C  DDRB=(0<<DDB2) | (0<<DDB1) | (0<<DDB0); // входи датчика температури DS18B20 і кнопок.
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 005D  PORTB |= (1<<1) | (1<<2);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 005E  DDRD = 0xFF;  // вихід на реле
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 005F 
; 0000 0060  w1_init();
;PCODE: $00000095 VOL: 0
; 0000 0061  ds18b20_init(0,0,120,0);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0062 
; 0000 0063  write(1, MAX7219_MODE_POWER);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0064  write(0xFF, MAX7219_MODE_DECODE);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0065  write(0x02, MAX7219_MODE_SCAN_LIMIT);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0066  write(0x03, MAX7219_MODE_INTENSITY);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0067  write(0x00, MAX7219_MODE_TEST);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0068 
; 0000 0069 
; 0000 006A 
; 0000 006B 
; 0000 006C 
; 0000 006D 
; 0000 006E 
; 0000 006F while (1)
;PCODE: $000000B2 VOL: 0
; 0000 0070     {
; 0000 0071      temper = ds18b20_temperature(0);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0072      print_val(temper);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0073 
; 0000 0074      if(Button_plus == 0)
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0075      {
; 0000 0076       dtemper++;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0077       print_val(dtemper);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0078       delay_ms(1000);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0079      }
; 0000 007A      if(Button_minus == 0)
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 007B      {
; 0000 007C       dtemper--;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 007D       print_val(dtemper);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 007E       delay_ms(1000);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 007F      }
; 0000 0080 
; 0000 0081       if(temper >= dtemper)
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0082       {
; 0000 0083        RELE = 0;}
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0084       else if(temper <= dtemper - gisteresis)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0085       {
; 0000 0086        RELE = 1;}
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0087 
; 0000 0088      delay_ms(10);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0089     }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 008A }
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
